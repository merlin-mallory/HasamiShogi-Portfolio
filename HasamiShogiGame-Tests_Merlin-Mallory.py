import unittest
from HasamiShogiGame_MerlinMallory import *


class TestProgram(unittest.TestCase):

    def test1_clear_board_test(self):
        print("===== TEST 01 =====")
        print("Testing clear_board_test...")
        test_g1 = HasamiShogiGame()
        print("Here's the original board setup:")
        print("Here's the original len:", len(test_g1._game_board_array))
        print(test_g1._game_board_array)

        print("Beginning board clear...")
        test_g1.clear_board()
        print("Clearing the board, here's the new one:")
        print(test_g1._game_board_array)
        print("Here's the cleared length:", len(test_g1._game_board_array))

        self.assertEqual(test_g1._game_board_array, ['_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_',
                                                     '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_',
                                                     '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_',
                                                     '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_',
                                                     '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_',
                                                     '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_',
                                                     '_', '_', '_'])
        self.assertEqual(len(test_g1._game_board_array), 81)

    def test2_print_board(self):
        print("===== TEST 02 =====")
        print("Testing print_board, manual check....")
        test_g1 = HasamiShogiGame()
        test_g1.print_board()
        print("Clearing the board and printing...")
        test_g1.clear_board()
        test_g1.print_board()

    def test3_init(self):
        print("===== TEST 03 =====")
        print("Testing init...")
        test_g1 = HasamiShogiGame()
        self.assertEqual(test_g1.get_game_state(), "UNFINISHED")
        self.assertEqual(test_g1.get_active_player(), "BLACK")
        self.assertEqual(test_g1.get_num_captured_pieces("BLACK"), 0)
        self.assertEqual(test_g1.get_num_captured_pieces("RED"), 0)

    def test4_convert_notation(self):
        print("===== TEST 04 =====")
        print("Testing convert_notation...")
        test_g1 = HasamiShogiGame()
        result = test_g1.convert_notation("a1")
        self.assertEqual(result, 0)
        result = test_g1.convert_notation("a9")
        self.assertEqual(result, 8)
        result = test_g1.convert_notation("b3")
        self.assertEqual(result, 11)
        result = test_g1.convert_notation("i9")
        self.assertEqual(result, 80)

    def test5_get_square_occupant(self):
        print("===== TEST 05 =====")
        print("Testing get_square_occupant...")
        test_g1 = HasamiShogiGame()
        result = test_g1.get_square_occupant("a1")
        self.assertEqual(result, "RED")
        result = test_g1.get_square_occupant("i9")
        self.assertEqual(result, "BLACK")
        result = test_g1.get_square_occupant("d1")
        self.assertEqual(result, "NONE")

    def test6_place_functions(self):
        print("===== TEST 06 =====")
        print("Testing placement functions...")
        test_g2 = HasamiShogiGame()
        test_g2.clear_board()
        test_g2.place_red("a1")
        test_g2.place_black("a2")
        test_g2.place_red("a3")
        test_g2.place_space("a3")
        self.assertEqual(test_g2._game_board_array[0], "R")
        self.assertEqual(test_g2._game_board_array[1], "B")
        self.assertEqual(test_g2._game_board_array[2], "_")

    def test7_legal_move_check_vertical_up1(self):
        print("===== TEST 07 =====")
        print("Testing legal_move_check vertical up normal....")
        test_g2 = HasamiShogiGame()
        test_g2.clear_board()
        test_g2.place_black("i9")
        test_g2.place_red("a9")
        print("Testing vertical up for True...")
        result = test_g2.legal_move_check(80, 17)
        self.assertEqual(result, True)
        print("Testing vertical up for False...")
        result2 = test_g2.legal_move_check(80, 8)
        self.assertEqual(result2, False)

    def test8_legal_move_check_vertical_up2(self):
        print("===== TEST 08 =====")
        print("Testing legal_move_check vertical up edge....")
        test_g3 = HasamiShogiGame()
        test_g3.clear_board()
        test_g3.place_black("i9")
        print("Testing vertical up for board edge for True...")
        result3 = test_g3.legal_move_check(80, 8)
        self.assertEqual(result3, True)
        print("Testing vertical up for board edge for False...")
        result4 = test_g3.legal_move_check(80, -1)
        self.assertFalse(result4)

    def test9_legal_move_check_down1(self):
        print("===== TEST 09 =====")
        print("Testing legal_move_check vertical down normal....")
        test_g2 = HasamiShogiGame()
        test_g2.clear_board()
        test_g2.place_black("i9")
        test_g2.place_red("a9")
        print("Testing vertical down for True...")
        result5 = test_g2.legal_move_check(8, 71)
        self.assertTrue(result5)
        print("Testing vertical down for False...")
        result6 = test_g2.legal_move_check(8, 80)
        self.assertFalse(result6)

    def test10_legal_move_check_down2(self):
        print("===== TEST 10 =====")
        print("Testing legal_move_check vertical down edges....")
        test_g4 = HasamiShogiGame()
        test_g4.clear_board()
        test_g4.place_black("a9")
        result7 = test_g4.legal_move_check(8, 80)
        self.assertTrue(result7)
        result9 = test_g4.legal_move_check(8, 83)
        self.assertFalse(result9)

    def test11_legal_move_check_left1(self):
        print("===== TEST 11 =====")
        print("Testing legal_move_check horizontal left for True...")
        test_g5 = HasamiShogiGame()
        test_g5.clear_board()
        test_g5.place_black("a9")
        test_g5.place_red("a1")
        result8 = test_g5.legal_move_check(8, 1)
        self.assertTrue(result8)
        print("Testing legal_move_check horizontal left for False...")
        result9 = test_g5.legal_move_check(8, 0)
        self.assertFalse(result9)

    def test12_legal_move_check_left2(self):
        print("===== TEST 12 =====")
        print("Testing legal_move_check horizontal left edge for True...")
        test_g6 = HasamiShogiGame()
        test_g6.clear_board()
        test_g6.place_black("a9")
        result8 = test_g6.legal_move_check(8, 0)
        self.assertTrue(result8)
        print("Testing legal_move_check horizontal left edge for False....")
        result9 = test_g6.legal_move_check(8, 9)
        self.assertFalse(result9)

    def test_13_legal_move_check_right1(self):
        print("===== TEST 13 =====")
        print("Testing legal_move_check horizontal right for True...")
        test_g7 = HasamiShogiGame()
        test_g7.clear_board()
        test_g7.place_black("a1")
        test_g7.place_red("a9")
        result10 = test_g7.legal_move_check(0, 7)
        self.assertTrue(result10)
        print("Testing legal_move_check horizontal right for False...")
        result11 = test_g7.legal_move_check(0, 8)
        self.assertFalse(result11)

    def test_14_legal_move_check_right2(self):
        print("===== TEST 14 =====")
        print("Testing legal_move_check horizontal right edge for True...")
        test_g8 = HasamiShogiGame()
        test_g8.clear_board()
        test_g8.place_black("a1")
        result12 = test_g8.legal_move_check(0, 8)
        self.assertTrue(result12)
        print("Testing legal_move_check horizontal right for False...")
        result13 = test_g8.legal_move_check(0, 10)
        self.assertFalse(result13)

    def test_15_legal_move_check_omni1(self):
        print("===== TEST 15 =====")
        print("Testing legal_move_check omni with empty board....")
        test_g9 = HasamiShogiGame()
        test_g9.clear_board()
        test_g9.place_black("e5")
        result14 = test_g9.legal_move_check(40, 36)
        self.assertTrue(result14)
        result15 = test_g9.legal_move_check(40, 44)
        self.assertTrue(result15)
        result16 = test_g9.legal_move_check(40, 4)
        self.assertTrue(result16)
        result17 = test_g9.legal_move_check(40, 76)
        self.assertTrue(result17)
        result18 = test_g9.legal_move_check(40, -5)
        self.assertFalse(result18)
        result19 = test_g9.legal_move_check(40, 85)
        self.assertFalse(result19)
        result20 = test_g9.legal_move_check(40, 35)
        self.assertFalse(result20)
        result21 = test_g9.legal_move_check(40, 45)
        self.assertFalse(result21)

    def test16_legal_move_check_omni2(self):
        print("===== TEST 16 =====")
        print("Testing legal_move_check omni with empty board....")
        test_g9 = HasamiShogiGame()
        test_g9.clear_board()
        test_g9.place_black("e5")
        test_g9.place_red("c5")
        test_g9.place_red("g5")
        test_g9.place_red("e7")
        test_g9.place_red("e3")
        result14 = test_g9.legal_move_check(40, 36)
        self.assertFalse(result14)
        result15 = test_g9.legal_move_check(40, 44)
        self.assertFalse(result15)
        result16 = test_g9.legal_move_check(40, 4)
        self.assertFalse(result16)
        result17 = test_g9.legal_move_check(40, 76)
        self.assertFalse(result17)
        result18 = test_g9.legal_move_check(40, 31)
        self.assertTrue(result18)
        result19 = test_g9.legal_move_check(40, 49)
        self.assertTrue(result19)
        result20 = test_g9.legal_move_check(40, 39)
        self.assertTrue(result20)
        result21 = test_g9.legal_move_check(40, 41)
        self.assertTrue(result21)

    def test17_make_move_player_mismatch(self):
        print("===== TEST 17 =====")
        print("Testing make_move to see what happens when the active player tries to move opposing pieces...")
        test_g10 = HasamiShogiGame()
        test_g10.clear_board()
        test_g10.place_red("a1")
        test_g10.place_black("i1")
        result22 = test_g10.make_move("i1", "i2")
        self.assertTrue(result22)
        self.assertEqual(test_g10.get_active_player(), "RED")
        result23 = test_g10.make_move("i2", "i3")
        self.assertFalse(result23)
        self.assertEqual(test_g10.get_active_player(), "RED")
        result24 = test_g10.make_move("a1", "a2")
        self.assertTrue(result24)
        self.assertEqual(test_g10.get_active_player(), "BLACK")
        result25 = test_g10.make_move("a2", "a3")
        self.assertFalse(result25)
        self.assertEqual(test_g10.get_active_player(), "BLACK")
        test_g10.print_board()

    def test18_removal_for_black_vertical_up_single(self):
        print("===== TEST 18 =====")
        print("Testing removal_for_black for vertical up removal (single)...")
        test_g11 = HasamiShogiGame()
        test_g11.clear_board()
        test_g11.place_red("b9")
        test_g11.place_black("a9")
        test_g11.place_black("i9")
        print("Before removal 1:")
        test_g11.print_board()
        test_g11.make_move("i9", "c9")
        print("After removal 1:")
        test_g11.print_board()

    def test18_removal_for_black_vertical_up_double(self):
        print("===== TEST 18 =====")
        print("Testing removal_for_black for vertical up removal (double)...")
        test_g11 = HasamiShogiGame()
        test_g11.clear_board()
        test_g11.place_red("b9")
        test_g11.place_red("c9")
        test_g11.place_black("a9")
        test_g11.place_black("i9")
        print("Before removal 1:")
        test_g11.print_board()
        test_g11.make_move("i9", "d9")
        print("After removal 1:")
        test_g11.print_board()
        self.assertEqual(test_g11.get_square_occupant("b9"), "NONE")
        self.assertEqual(test_g11.get_square_occupant("c9"), "NONE")

    def test19_removal_for_black_vertical_down_single(self):
        print("===== TEST 19 =====")
        print("Testing removal_for_black for vertical down removal (single)...")
        test_g12 = HasamiShogiGame()
        test_g12.clear_board()
        test_g12.place_red("e5")
        test_g12.place_black("f5")
        test_g12.place_black("a5")
        print("Before removal 1:")
        test_g12.print_board()
        test_g12.make_move("a5", "d5")
        print("After removal 1:")
        test_g12.print_board()
        self.assertEqual(test_g12.get_square_occupant("e5"), "NONE")

    def test20_removal_for_black_vertical_down_double(self):
        print("===== TEST 20 =====")
        print("Testing removal_for_black for vertical down removal (double)...")
        test_g12 = HasamiShogiGame()
        test_g12.clear_board()
        test_g12.place_red("e5")
        test_g12.place_red("f5")
        test_g12.place_black("g5")
        test_g12.place_black("a5")
        print("Before removal 2:")
        test_g12.print_board()
        test_g12.make_move("a5", "d5")
        print("After removal 2:")
        test_g12.print_board()
        self.assertEqual(test_g12.get_square_occupant("e5"), "NONE")
        self.assertEqual(test_g12.get_square_occupant("f5"), "NONE")

    def test21_removal_for_black_horizontal_left_single(self):
        print("===== TEST 21 =====")
        print("Testing removal_for_black for horizontal left removal (single)")
        test_g13 = HasamiShogiGame()
        test_g13.clear_board()
        test_g13.place_red("e2")
        test_g13.place_black("e1")
        test_g13.place_black("e9")
        print("Before removal 1:")
        test_g13.print_board()
        test_g13.make_move("e9", "e3")
        print("After removal 1:")
        test_g13.print_board()
        self.assertEqual(test_g13.get_square_occupant("e2"), "NONE")

    def test22_removal_for_black_horizontal_left_double(self):
        print("===== TEST 22 =====")
        print("Testing removal_for_black for horizontal left removal (single)")
        test_g13 = HasamiShogiGame()
        test_g13.clear_board()
        test_g13.place_red("e2")
        test_g13.place_red("e3")
        test_g13.place_red("e4")
        test_g13.place_black("e1")
        test_g13.place_black("e9")
        print("Before removal 1:")
        test_g13.print_board()
        test_g13.make_move("e9", "e5")
        print("After removal 1:")
        test_g13.print_board()
        self.assertEqual(test_g13.get_square_occupant("e2"), "NONE")
        self.assertEqual(test_g13.get_square_occupant("e3"), "NONE")
        self.assertEqual(test_g13.get_square_occupant("e4"), "NONE")

    def test23_removal_for_black_horizontal_right_single(self):
        print("===== TEST 23 =====")
        print("Testing removal_for_black for horizontal right removal (single)")
        test_g14 = HasamiShogiGame()
        test_g14.clear_board()
        test_g14.place_black("e9")
        test_g14.place_red("e8")
        test_g14.place_black("e1")
        print("Before removal 1:")
        test_g14.print_board()
        test_g14.make_move("e1", "e7")
        print("After removal 1:")
        test_g14.print_board()
        self.assertEqual(test_g14.get_square_occupant("e8"), "NONE")

    def test24_removal_for_black_horizontal_right_single(self):
        print("===== TEST 24 =====")
        print("Testing removal_for_black for horizontal right removal (double)")
        test_g14 = HasamiShogiGame()
        test_g14.clear_board()
        test_g14.place_black("e9")
        test_g14.place_red("e8")
        test_g14.place_black("e7")
        test_g14.place_red("e6")
        test_g14.place_red("e5")
        test_g14.place_black("e1")
        print("Before removal 2:")
        test_g14.print_board()
        test_g14.make_move("e1", "e4")
        print("After removal 2:")
        test_g14.print_board()
        self.assertEqual(test_g14.get_square_occupant("e8"), "RED")
        self.assertEqual(test_g14.get_square_occupant("e6"), "NONE")
        self.assertEqual(test_g14.get_square_occupant("e5"), "NONE")

    def test25_removal_for_black_multi(self):
        print("===== TEST 25 =====")
        print("Testing for multidirectional removal (double)")
        test_g15 = HasamiShogiGame()
        test_g15.clear_board()
        test_g15.place_black("b5")
        test_g15.place_black("e2")
        test_g15.place_black("e8")
        test_g15.place_red("c5")
        test_g15.place_red("d5")
        test_g15.place_red("e3")
        test_g15.place_red("e4")
        test_g15.place_red("e6")
        test_g15.place_red("e7")
        test_g15.place_black("i5")
        print("Before removal multi:")
        test_g15.print_board()
        test_g15.make_move("i5", "e5")
        print("After removal multi:")
        test_g15.print_board()
        self.assertEqual(test_g15.get_square_occupant("c5"), "NONE")
        self.assertEqual(test_g15.get_square_occupant("d5"), "NONE")
        self.assertEqual(test_g15.get_square_occupant("e3"), "NONE")
        self.assertEqual(test_g15.get_square_occupant("e4"), "NONE")
        self.assertEqual(test_g15.get_square_occupant("e6"), "NONE")
        self.assertEqual(test_g15.get_square_occupant("e7"), "NONE")

    def test25_for_black_win9(self):
        print("===== TEST 26 =====")
        print("Testing for multidirectional removal (double)")
        test_g15 = HasamiShogiGame()
        test_g15.clear_board()
        test_g15.place_black("a5")
        test_g15.place_black("e1")
        test_g15.place_black("e9")
        test_g15.place_red("b5")
        test_g15.place_red("c5")
        test_g15.place_red("d5")
        test_g15.place_red("e2")
        test_g15.place_red("e3")
        test_g15.place_red("e4")
        test_g15.place_red("e6")
        test_g15.place_red("e7")
        test_g15.place_red("e8")
        test_g15.place_black("i5")
        print("Before removal multi:")
        test_g15.print_board()
        test_g15.make_move("i5", "e5")
        print("After removal multi:")
        test_g15.print_board()
        print("Black's number of captured pieces:", test_g15.get_num_captured_pieces("BLACK"))
        self.assertEqual(test_g15.get_game_state(), "BLACK_WON")
        self.assertEqual(test_g15.get_num_captured_pieces("BLACK"), 9)

    def test26_for_black_win8(self):
        print("===== TEST 26 =====")
        print("Testing for multidirectional removal (double)")
        test_g15 = HasamiShogiGame()
        test_g15.clear_board()
        test_g15.place_black("b5")
        test_g15.place_black("e1")
        test_g15.place_black("e9")
        test_g15.place_red("c5")
        test_g15.place_red("d5")
        test_g15.place_red("e2")
        test_g15.place_red("e3")
        test_g15.place_red("e4")
        test_g15.place_red("e6")
        test_g15.place_red("e7")
        test_g15.place_red("e8")
        test_g15.place_black("i5")
        print("Before removal multi:")
        test_g15.print_board()
        test_g15.make_move("i5", "e5")
        print("After removal multi:")
        test_g15.print_board()
        print("Black's number of captured pieces:", test_g15.get_num_captured_pieces("BLACK"))
        self.assertEqual(test_g15.get_game_state(), "BLACK_WON")
        self.assertEqual(test_g15.get_num_captured_pieces("BLACK"), 8)
        test_g15.place_red("a8")
        result = test_g15.make_move("a8", "a7")
        test_g15.print_board()
        self.assertFalse(result)

    def test27_corner_removal_for_black(self):
        print("===== TEST 26 =====")
        print("Testing corner removal for black...")
        test_g16 = HasamiShogiGame()
        test_g16.clear_board()
        test_g16.place_red("a1")
        test_g16.place_red("a9")
        test_g16.place_red("i1")
        test_g16.place_red("i9")
        test_g16.place_black("a2")
        test_g16.place_black("a8")
        test_g16.place_black("i2")
        test_g16.place_black("i8")
        test_g16.place_black("e1")
        test_g16.place_black("f1")
        test_g16.place_black("e9")
        test_g16.place_black("f9")
        test_g16.place_red("e5")
        print("Before removal multi:")
        test_g16.print_board()
        test_g16.make_move("e1", "b1")
        test_g16.make_move("e5", "e4")
        test_g16.make_move("f1", "h1")
        test_g16.make_move("e4", "e5")
        test_g16.make_move("e9", "b9")
        test_g16.make_move("e5", "e4")
        test_g16.make_move("f9", "h9")
        print("After removal multi:")
        test_g16.print_board()
        print("Black's number of captured pieces:", test_g16.get_num_captured_pieces("BLACK"))
        print("get_active_player:", test_g16.get_active_player())
        print("get_game_state:", test_g16.get_game_state())
        self.assertEqual(test_g16.get_num_captured_pieces("BLACK"), 4)
        self.assertEqual(test_g16.get_square_occupant("a1"), "NONE")
        self.assertEqual(test_g16.get_square_occupant("a9"), "NONE")
        self.assertEqual(test_g16.get_square_occupant("i1"), "NONE")
        self.assertEqual(test_g16.get_square_occupant("i9"), "NONE")

    def test_28_corner_removal_for_red(self):
        print("===== TEST 26 =====")
        print("Testing corner removal for red...")
        test_g16 = HasamiShogiGame()
        test_g16.clear_board()
        test_g16.place_black("a1")
        test_g16.place_black("a9")
        test_g16.place_black("i1")
        test_g16.place_black("i9")
        test_g16.place_red("a2")
        test_g16.place_red("a8")
        test_g16.place_red("i2")
        test_g16.place_red("i8")
        test_g16.place_red("e1")
        test_g16.place_red("f1")
        test_g16.place_red("e9")
        test_g16.place_red("f9")
        test_g16.place_black("e5")
        print("Before removal multi:")
        test_g16.print_board()
        test_g16.make_move("e5", "e4")
        test_g16.make_move("e1", "b1")
        test_g16.make_move("e4", "e5")
        test_g16.make_move("f1", "h1")
        test_g16.make_move("e5", "e4")
        test_g16.make_move("e9", "b9")
        test_g16.make_move("e4", "e5")
        test_g16.make_move("f9", "h9")
        print("After removal multi:")
        test_g16.print_board()
        print("Red's number of captured pieces:", test_g16.get_num_captured_pieces("RED"))
        print("get_active_player:", test_g16.get_active_player())
        print("get_game_state:", test_g16.get_game_state())
        self.assertEqual(test_g16.get_num_captured_pieces("RED"), 4)
        self.assertEqual(test_g16.get_square_occupant("a1"), "NONE")
        self.assertEqual(test_g16.get_square_occupant("a9"), "NONE")
        self.assertEqual(test_g16.get_square_occupant("i1"), "NONE")
        self.assertEqual(test_g16.get_square_occupant("i9"), "NONE")

    def test25_for_red_win9(self):
        print("===== TEST 26 =====")
        print("Testing for multidirectional removal (double)")
        test_g15 = HasamiShogiGame()
        test_g15.clear_board()
        test_g15.place_red("a5")
        test_g15.place_red("e1")
        test_g15.place_red("e9")
        test_g15.place_black("b5")
        test_g15.place_black("c5")
        test_g15.place_black("d5")
        test_g15.place_black("e2")
        test_g15.place_black("e3")
        test_g15.place_black("e4")
        test_g15.place_black("e6")
        test_g15.place_black("e7")
        test_g15.place_black("e8")
        test_g15.place_red("i5")
        test_g15.place_black("i9")
        print("Before removal multi:")
        test_g15.print_board()
        test_g15.make_move("i9", "i8")
        test_g15.make_move("i5", "e5")
        print("After removal multi:")
        test_g15.print_board()
        print("Black's number of captured pieces:", test_g15.get_num_captured_pieces("RED"))
        self.assertEqual(test_g15.get_game_state(), "RED_WON")
        self.assertEqual(test_g15.get_num_captured_pieces("RED"), 9)

    def test_25_edge_removal(self):
        print("===== TEST 27 =====")
        print("Testing for edge removal situations....")
        test_g16 = HasamiShogiGame()
        test_g16.clear_board()

        test_g16.place_black("a3")
        test_g16.place_red("a2")
        test_g16.place_black("b1")

        test_g16.place_black("a9")
        test_g16.place_red("a8")
        test_g16.place_black("b7")

        test_g16.place_black("i1")
        test_g16.place_red("i2")
        test_g16.place_black("h3")

        test_g16.place_black("i7")
        test_g16.place_red("i8")
        test_g16.place_black("h9")

        test_g16.place_red("e5")

        print("Before move:")
        test_g16.print_board()

        test_g16.make_move("b1", "a1")
        test_g16.make_move("e5", "e4")
        test_g16.make_move("b7", "a7")
        test_g16.make_move("e4", "e5")
        test_g16.make_move("h3", "i3")
        test_g16.make_move("e5", "e4")
        test_g16.make_move("h9", "i9")

        print("After move:")
        test_g16.print_board()

        self.assertEqual(test_g16.get_square_occupant("a2"), "NONE")
        self.assertEqual(test_g16.get_square_occupant("a8"), "NONE")
        self.assertEqual(test_g16.get_square_occupant("i2"), "NONE")
        self.assertEqual(test_g16.get_square_occupant("i8"), "NONE")


if __name__ == '__main__':
    unittest.main()